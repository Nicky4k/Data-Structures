class Node {
  value;
  next;
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class LinkedList {
  constructor() {
    this.head = null;
    this.size = 0;
  }

  insertElement(el) {
    if (!el) return;
    const node = new Node(el);
    let current;
    if (!this.head) {
      this.head = node;
    } else {
      current = this.head;
      for (let i = 1; i <= this.size - 1; i++) {
        if (current.next) current = current.next;
      }
      current.next = node;
    }
    this.size++;
  }

  insertAt(val, index) {
    if (index < 0 || index > this.size) {
      return console.error(
        `Please enter a valid index, index: ${index} is invalid.`
      );
    }
    const node = new Node(val);
    if (index === 0) {
      node.next = this.head;
      this.head = node;
    } else {
      let current = this.head;
      for (let i = 1; i < index; i++) {
        current = current.next;
      }
      let temp = current.next;
      current.next = node;
      node.next = temp;
    }
    this.size++;
  }

  deleteAt(index) {
    if (index <= 0 || index > this.size) {
      return console.error(
        `Please enter a valid index, index: ${index} is invalid.`
      );
    } else {
      let current;
      let previous;
      current = this.head;
      if (index === 1) {
        this.head = current.next;
      } else {
        for (let i = 1; i < index; i++) {
          previous = current;
          current = current.next;
        }
        previous.next = current.next;
      }
      this.size--;
    }
  }

  displayList() {
    let curr = this.head;
    let op = "head > ";
    for (let i = 1; i <= this.size; i++) {
      curr.next
        ? ((op += curr.value + " > "), (curr = curr.next))
        : (op += curr.value + " > tail ");
    }
    console.log(op);
  }
}
